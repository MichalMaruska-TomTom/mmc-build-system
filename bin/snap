#! /bin/zsh -xeu

# setop pipefail


# see the previous tag for the Version.
# unless the debian/changelog contains the development
# version already.

#source @@SHAREDIR@@/functions
source /usr/share/build-system/functions.sh

function git-last-tag() {
    current_tag
    exit
    # fixme: HEAD~100
    # ..HEAD
    # $(git rev-list --tags --max-count=1 )
    # might want to separate  tag-[[:digit:]]+-[[:alpha:]]+
    git describe 2> /dev/null |\
    sed -e 's|^\(.*\)/.*$|\1|g'
}


function usage(){
cat >&2 <<EOF
usage: ${0##*/} [+-upb} [--] ARGS...
    -b  ... ignore branch
    -b  ... ignore branch
    -v  ... new version
EOF
}

DEFAULT_NEW_VERSION=3
DCH_FLAGS=""
typeset -a GBP_OPTIONS
GBP_OPTIONS=()
while getopts :upbhv: OPT; do
    case $OPT in
	h)
	    usage
	    exit 0;;
	b)
	    # ignore-branch
	    DCH_FLAGS="--ignore-branch"
	    GBP_OPTIONS+="--git-ignore-branch"
	    ;;
	u|+u)
	    # fixme: should use arrays
	    # prepend!
	    GBP_OPTIONS=(-u ${GBP_OPTIONS})
	    ;;
	p|+p)
	    # /usr/bin/
	    GBP_OPTIONS+="--git-builder=git-pbuilder"
	    ;;
	v)
	    DEFAULT_NEW_VERSION=$OPTARG
	    ;;
	*)
	    usage
	    exit 2
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1


last_tag=$(git-last-tag)
cecho green "last release tag: $last_tag"

# todo: in-place if "git status" says clean


# keep changelog out:
# create it in a hook!

# for release: --git-builder /usr/bin/git-pbuilder
# dubious:
DCH_OPTIONS=""
if git status --porcelain debian/changelog |grep --silent '^ M';
then
    cp debian/changelog debian/changelog.save
else
    DCH_OPTIONS="--new-version=$DEFAULT_NEW_VERSION"
fi

git-dch --auto --snapshot "--debian-tag=$last_tag/%(version)s" $DCH_OPTIONS

if false;
then
    git-dch --auto --snapshot
# exit 0
    git add debian/changelog; git commit -m snapshot-build
fi


cecho red "Starting git-buildpackage, with hooks!"
#
# DIST=oneiric  ARCH=amd64
# --git-sign-tags


# --color=auto
# lsb_release -c
# --git-dist=oneiric
git-buildpackage --git-ignore-new $GBP_OPTIONS --git-prebuild=pre-build-hook \
--git-dist=UNRELEASED --git-arch=$(dpkg-architecture -qDEB_BUILD_ARCH) \
--git-postbuild=install-snapshot


#&& debi --debs-dir ../build-area/

# snap     fast, without any cow. Doesn't verify dependencies
#          but still  control.in ?
# psnap... using cow-builder
# release
#