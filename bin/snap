#! /bin/zsh -xeu

# setop pipefail


# see the previous tag for the Version.
# unless the debian/changelog contains the development
# version already.

#source @@SHAREDIR@@/functions
source /usr/share/build-system/functions.sh

function usage(){
cat >&2 <<EOF
usage: ${0##*/} [+-upb} [--] ARGS...
    -b  ... ignore branch
    -b  ... ignore branch
    -v  ... new version
EOF
}

UNRELEASED=UNRELEASED
DISTRO=$UNRELEASED
typeset -a DCH_OPTIONS
typeset -a GBP_OPTIONS
GBP_OPTIONS=()
while getopts :upbhv: OPT; do
    case $OPT in
	h)
	    usage
	    exit 0;;
	b)
	    # ignore-branch
	    DCH_OPTIONS=("--ignore-branch")
	    GBP_OPTIONS+="--git-ignore-branch"
	    ;;
	u|+u)
	    # fixme: should use arrays
	    # prepend!
	    GBP_OPTIONS=(-u ${GBP_OPTIONS})
	    ;;
	p|+p)
	    # /usr/bin/
	    GBP_OPTIONS+="--git-builder=git-pbuilder"
	    ;;
	v)
	    DEFAULT_NEW_VERSION=$OPTARG
	    ;;
	*)
	    usage
	    exit 2
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1


set +e
get_current_tag
found_tag=$?
set -e

# todo: in-place if "git status" says clean

# keep changelog out:
# create it in a hook!

# for release: --git-builder /usr/bin/git-pbuilder
# dubious:

# todo: but, maybe it WAS committed in the last commit & nothing has changed!
if git status --porcelain debian/changelog |grep --silent '^ M';
then
    # Already updated since a release. So, the version should be there.
    cp debian/changelog debian/changelog.save
else
    # get the current version & increase. The major maybe.
    load_distr_version_from_changelog
    increase_version major
    if [ -z "${DEFAULT_NEW_VERSION:-}" ]
    then
	echo "Starting a new version $VERSION. Could have been explicitely specified with the -v option.">&2
    fi
    DCH_OPTIONS+=" --new-version=${DEFAULT_NEW_VERSION:-$VERSION}"
fi

git-dch --auto --snapshot "--debian-tag=$DISTRO/%(version)s" $DCH_OPTIONS

if false;
then
    git-dch --auto --snapshot
# exit 0
    git add debian/changelog; git commit -m snapshot-build
fi


cecho red "Starting git-buildpackage, with hooks!"
#
# DIST=oneiric  ARCH=amd64
# --git-sign-tags


# --color=auto
# lsb_release -c
# --git-dist=oneiric
INSTALL_IMMEDIATELY=y \
git-buildpackage \
    --git-ignore-new $GBP_OPTIONS \
    --git-prebuild=pre-build-hook \
    --git-dist=$UNRELEASED \
    --git-arch=$(dpkg-architecture -qDEB_BUILD_ARCH) \
    --git-postbuild=install-snapshot


# snap     fast, without any cow. Doesn't verify dependencies
#          but still  control.in ?
# psnap... using cow-builder
# release
#