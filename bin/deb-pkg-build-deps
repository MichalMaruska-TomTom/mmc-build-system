#! /usr/bin/perl

# dump the Build-deps of a debian/control file.

use Dpkg::Control::Info;
use Dpkg::Control::Hash;
use Dpkg::Control::Changelog;
# ffap?
# /usr/share/perl5/Dpkg/Deps.pm
use Dpkg::Deps;


use Getopt::Mixed "nextOption";

my $build_deps=0;
my $deps=0;

my $verbose=0;
my $debug=0;

#### CMD line processsing:
my @options=("help build-deps deps verbose d>verbose h>help b>build-deps s>deps");
Getopt::Mixed::init( @options);
my ($option, $value, $pretty);

while (($option, $value, $pretty) = nextOption()) {
    if ($option eq "build-deps") {
	$build_deps=1;
	print STDERR "build deps\n";
    } elsif ($option eq "deps") {
	$deps=1;
    } elsif ($option eq "verbose") {
	# print STDERR "I'll be verbose!\n";
	$debug=1;
	$verbose=1;
    };
}
Getopt::Mixed::cleanup();


my $file=shift();
if ( -d $file ) {
    $file=$file . "/debian/control" ;
}

unless  (-f $file) {
    die("non-existent file $file");
}


my $control = Dpkg::Control::Info->new($file);
print STDERR "parsed $file\n";


my $fields = $control->get_source();
my $source_pkg = $fields->{Source};
# build packages depend on the source package.
# print "\npkg: ", $source_pkg, "\n";

#   push @bd_list, $fields->{'Build-Depends-Arch'} if not $ignore_bd_arch;
#   push @bd_list, $fields->{'Build-Depends-Indep'} if not $ignore_bd_indep;


sub fun{
    my ($dep) = @_;
    # print $dep, "\n";
    # ignore ' (...)' trailing
    $dep =~ s/ (.*)$//;
    print $source_pkg, "\t", $dep, "\n";
    return 1;
}


if ($build_deps) {
    print STDERR "Build-Depens\n" if $debug;

    # fixme: this is not a string!
    $dep_string = deps_parse($fields->{'Build-Depends'});
    deps_iterate($dep_string, \&fun);
}

print STDERR "dependency string: $dep_string\n";

# mapping:  bdep: source -> binary
#           rel:  binary -> source.
# from this reorder.  possibly a cycle!



my $dep_string ="";
# fixme:
if ($deps) {
    print STDERR "Depends\n" if $debug;

    # $dep_string = deps_parse($fields->{'Depends'});
    # , reduce_restrictions => 1, union => 1,
    # build_dep => 1, build_profiles => \@build_profiles,
    # host_arch => $host_arch

    foreach $_ ($control->get_packages())
    {
	print $_->{Package}, "\t", $source_pkg, "\n";

	my $depends = $_->{'Depends'};
	print STDERR $depends, "\n";

	# my $quoted_name= quotemeta "\${shlibs:Depends}";
	# print STDERR $quoted_name, "\n";
	# $depends =~ s/$quoted_name//;

	$depends =~ s/\$\Q{shlibs:Depends}//;
	$depends =~ s/\$\Q{misc:Depends}//;
	# drop ${shlibs:Depends}, ${misc:Depends},
	# print STDERR $depends, "\n";
	$dep_string = deps_parse($depends);
	deps_iterate($dep_string, \&fun);
    }
}

# $dep_list->simplify_deps($facts);
#print $dep;
    # error(_g('error occurred while parsing %s'),
    #       'Build-Conflicts/Build-Conflicts-Arch/Build-Conflicts-Indep')
    #     unless defined $dep;
