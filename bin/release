#! /bin/zsh -euxf

function usage()
{
    echo "usage: ${0##*/} [+-r Distro] [+-r arch] [+-t tag} [-p dput-target]* "
}

# options:

DISTRO=release
# GIT_TAG=

typeset -a DPUT_TARGETS
DPUT_TARGETS=()
typeset -a MGB_COMMON_OPTIONS
MGB_COMMON_OPTIONS=()
FORCE=n
# ARCH


while getopts :rft:a:p:i OPT; do
    case $OPT in
	a)
	    ARCH="$OPTARG";;
	f)
	    FORCE=y
	    ;;
	r|+r)
	    "$OPTARG"
	    ;;
	t|+t)
	    # git-tag
	    "$OPTARG"
	    ;;
	p)
	    DPUT_TARGETS=($DPUT_TARGETS $OPTARG)
	    ;;
	i)
	    MGB_COMMON_OPTIONS=("-i")
	    ;;
	*)
	    usage
	    exit 2
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1

if [ "$DPUT_TARGETS" = "" -a -n "${MBS_TARGETS-}" ];
then
    DPUT_TARGETS=$MBS_TARGETS
fi


function generate_commit_changelog() {
# Finally:
# fixme: this needs the git-last-tag:
    git-dch --release --auto
# "--debian-tag=$DISTRO/%(version)s"
    git add debian/changelog; git commit -m release
}


# if debian/changelog is up-to-date, skip this:?
if git status --porcelain debian/changelog|grep '^ M';
then
    generate_commit_changelog
elif [ $FORCE = "y" ] ;
then
    generate_commit_changelog
fi



# fixme: maybe the tag is there already?
# if NO tag at all:
# fatal: No names found, cannot describe anything.
set +e
description=$(git describe HEAD)
if [ $? = 0 ]
then
    version=${description#*/}
    DISTRO=${description%/*}
    echo $version
else
    if git tag -l |grep .;
    then
	cecho red "not _past_ Git tag. But other tags present"
	if [ $FORCE != "y" ]
	then
	    exit 1
	fi
    fi
    cecho red "not past Git tag. Taking hint from the debian/changelog"
    # extract the distro from changelog!
    ls -l debian/changelog
    DISTRO=$(dpkg-distribution debian/changelog)
    version=$(dpkg-version debian/changelog)
fi
set -e



# *now* the default value:
: ${GIT_TAG:=$DISTRO/$version}

cecho green $GIT_TAG


# tagname-N-hash
typeset -a MGB_OPTIONS
MGB_OPTIONS=()
if git tag -l "$GIT_TAG"|grep ".";
then
    :
else
    MGB_OPTIONS+=(--git-tag "--git-debian-tag=$DISTRO/%(version)s")
fi

# exit
mygit-buildpackage $MGB_COMMON_OPTIONS $MGB_OPTIONS


debi --debs-dir ../build-area/

for target in $DPUT_TARGETS;
do
    debrelease --debs-dir=../build-area --dput $target
done


# Source
# -S is handed over.... git-buildpackage -> debuild -> dpkg-buildpackage.


# again  debian/control   Could be done Once
# again ./auto  Yes
mygit-buildpackage $MGB_COMMON_OPTIONS -S

# notice the asymetry: in `snap' we invoke dput on GBP_CHANGES_FILE.
# Here we rely on the debian/changelog to confirm it.
for target in $DPUT_TARGETS;
do
    debrelease -S --debs-dir=../build-area --dput $target
done


# --git-builder /usr/bin/git-pbuilder

