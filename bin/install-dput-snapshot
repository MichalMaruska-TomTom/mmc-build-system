#! /usr/bin/zsh -fx

# todo:
# could use GBP_CHANGES_FILE even after building with db!


# This is just a wrapper around debi & dput (or reprepro)

# Normally invoked as a post-build hook by git-buildpackage -- receives variables see bellow
# via `env' variables, it can be tuned:
# DPUT_TARGETS & DPUT_OPTIONS
# INSTALL_IMMEDIATELY


# When invoked manually, we use:
# MBS_SNAP_TARGETS

# Given as $1 the changes file
# dput it to all in

#source @@SHAREDIR@@/functions
source /usr/share/build-system/functions.sh
possibly_trace



function usage(){
cat <<EOF
usage: ${0##*/} [+-ufi} [--] ARGS...
dput(1) options basically
-u don't check the signaure
-f force RE-upload
-i install immediatelly
-d {DISTRO}
-r release, so use the MBS_TARGETS, and hence dput(1) in those
EOF
}

#defaults:
# fixme: this is set in ~/.gbp.conf (by git-buildpackage)
BUILD_AREA=${GBP_BUILD_DIR:-../_build-area/}
: ${INSTALL_IMMEDIATELY=n}
DISTRO=$MBS_DISTRO

typeset -T DPUT_OPTIONS dput_options

# Convert from MBS_TARGETS into a Zsh array. My standard!
typeset -T MBS_TARGETS mbs_targets ":"
typeset -T DPUT_TARGETS dput_targets


# make it manually invokable:
while getopts :ufird: OPT; do
    case $OPT in
	u|+u)
	    dput_options+=("--unchecked")
	    ;;
	f)
	    dput_options+=("--force")
	    ;;
	i)
	    INSTALL_IMMEDIATELY=y
	    ;;
	r)
	    dput_targets=($mbs_targets)
	    ;;
	d)
	    DISTRO=$OPTARG
	    ;;
	*)
	    usage
	    exit 2
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1

# if still arguments remain,
if [ $# -gt 0 ]
then
    GBP_CHANGES_FILE=$1
fi

if [ -z "$GBP_CHANGES_FILE" ]; then
    echo "did not provide the Changes file!"
    usage
    exit 2
fi


# install into (local) reprepro:
# $GBP_BUILD_DIR is the build directory: I don't need it.
if [ -n "${REPREPRO_BASE_DIR-}" -a -n "${GBP_CHANGES_FILE}" ]
then
    cecho green "Putting into Reprepro: ${GBP_CHANGES_FILE}"

    # fixme: snapshot -> not a big deal if I still get the dist. wrong?
    reprepro --basedir "$REPREPRO_BASE_DIR" --ignore=wrongdistribution  -V \
        include $DISTRO $GBP_CHANGES_FILE
fi



if [ -z "${dput_targets}" ]; then
    cecho green "no Dput targets"
else
    for TARGET in ${dput_targets}
    do
	cecho blue "Uploading to $TARGET"

	if [ -z ${GBP_CHANGES_FILE-} ]; then
	    if ! debrelease --debs-dir=$BUILD_AREA --dput $TARGET; then
		(echo "Failed to upload to $TARGET"; echo )>&2
	    fi
	else
	    if ! dput --unchecked $dput_options $TARGET $GBP_CHANGES_FILE;
	    then
		cecho yellow "target $TARGET failed, but not fatal!"
	    fi
	fi
    done
fi



## Install  (this is even faster)
if [ ${INSTALL_IMMEDIATELY} = "y" ]
then
    cecho green "installing immediately ${GBP_CHANGES_FILE}"
    if [ -n "${GBP_CHANGES_FILE}" ]; then
	debi ${DEBI_OPTIONS-} $GBP_CHANGES_FILE
    else
	debi ${DEBI_OPTIONS-} --debs-dir $BUILD_AREA
    fi
else
    cecho green "not requested to install immediately"
    echo "** If you want to install:"
    # cecho gray:
    echo "debi --debs-dir $BUILD_AREA"
fi
