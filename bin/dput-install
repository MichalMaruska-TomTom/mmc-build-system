#! /usr/bin/zsh -feu

# This is just a wrapper around debi & dput (or reprepro)

# 1/ Normally invoked as a post-build hook by git-buildpackage --
# receives variables (see bellow)

# Via `env' variables, it can be tuned:
# DPUT_TARGETS & DPUT_OPTIONS
# INSTALL_IMMEDIATELY
# todo:
# could use GBP_CHANGES_FILE even after building with db!

# 2/ When invoked manually, we use:
# MBS_SNAP_TARGETS
# Given as $1 the changes file
# dput it to all in



#source @@SHAREDIR@@/functions
source /usr/share/build-system/functions.sh
possibly_trace



function usage(){
    cat <<EOF
usage: ${0##*/} [+-ufi} [--] ARGS...
dput(1) options basically
-u don\'t check the signaure
-f force RE-upload
-i install immediatelly
-I upgrade only
-d {DISTRO}
-r release, so use the MBS_TARGETS, and hence dput(1) in those

Environment:
DPUT_TARGETS
EOF
}

# defaults:
# fixme: this is set in ~/.gbp.conf (by git-buildpackage)
# DEBRELEASE_DEBS_DIR ?


if [[ -n ${GBP_BUILD_DIR-} ]]; then
    BUILD_AREA=${GBP_BUILD_DIR%/*}
else
    BUILD_AREA=../_build-area/
fi

# I like these defaults better:
: ${INSTALL_IMMEDIATELY=y}
DEBI_OPTIONS+=("--upgrade")


DISTRO=${MBS_DISTRO-}
release=n

# we compose options for `dput'
typeset -T DPUT_OPTIONS dput_options

# in particular the `targets'
# Convert from MBS_TARGETS into a Zsh array. My standard!
typeset -T MBS_TARGETS mbs_targets ":"
typeset -T DPUT_TARGETS dput_targets

# possible input via this variable:
[ -z "$DPUT_TARGETS" ] && dput_targets=${MBS_SNAP_TARGETS-}

# make it manually invokable:
while getopts :ufiIrd:n OPT; do
    case $OPT in
	u|+u)
	    dput_options+=("--unchecked")
	    ;;
	f)
	    dput_options+=("--force")
	    ;;
	n)
	    INSTALL_IMMEDIATELY=n
	    ;;
	i)
	    INSTALL_IMMEDIATELY=y
	    # fixme: just remove "--upgrade"
	    DEBI_OPTIONS+=()
	    ;;
	I) # useless?
	    INSTALL_IMMEDIATELY=y
	    DEBI_OPTIONS+=("--upgrade")
	    ;;
	r)
	    dput_targets=($mbs_targets)
	    release=y
	    ;;
	d)
	    DISTRO=$OPTARG
	    ;;
	*)
	    usage
	    exit 2
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1

# if still arguments remain,
if [ $# -gt 0 ]
then
    GBP_CHANGES_FILE=$1
else
    GBP_CHANGES_FILE=$(deb-pkg-find-changes)
fi

if [ -z "${GBP_CHANGES_FILE-}" ]; then
    echo "did not provide the Changes file!"
    usage
    exit 2
fi


# dput/install into (local) reprepro:
# $GBP_BUILD_DIR is the build directory: I don't need it.
if [ -n "${REPREPRO_BASE_DIR-}" -a -n "${GBP_CHANGES_FILE}" ]
then
    cecho green "first remove development packages"
    # first remove ... If I decided for only a minor version bump
    # todo: improve this somehow?
    packages=($(sed --quiet -e '/^Binary:/{s/Binary://;p}' $GBP_CHANGES_FILE))
    foreach package ($packages) {
	reprepro remove UNRELEASED $package
    }

    # Distribution: release
    DISTRO=$(sed -n -e '/^Distribution: /{s/Distribution: //;p}' $GBP_CHANGES_FILE)

    # fixme: if the distro is not local?
    if test -n "$DISTRO"  &&
	## acceptable in reprepro
	grep "Codename: *$DISTRO" $REPREPRO_BASE_DIR/conf/distributions;
    then
	cecho blue "Putting into Reprepro: ${GBP_CHANGES_FILE}"
	reprepro --basedir "$REPREPRO_BASE_DIR" -V --ignore=surprisingbinary \
		 include "$DISTRO" $GBP_CHANGES_FILE
    fi
fi



## Install  (this is even faster)
if [ ${INSTALL_IMMEDIATELY} = "y" ]
then
    cecho green "installing immediately ${GBP_CHANGES_FILE}"
    if [ -n "${GBP_CHANGES_FILE}" ]; then
	debi ${DEBI_OPTIONS-} $GBP_CHANGES_FILE
    else
	debi ${DEBI_OPTIONS-} --debs-dir $BUILD_AREA
    fi
else
    cecho green "not requested to install immediately"
    echo "** If you want to install:"
    # cecho gray:
    echo "debi --debs-dir $BUILD_AREA"
fi


## upload
# note that  `local' is basically wrong. reprepro is done natively.
if [ -z "${dput_targets}" ]; then
    cecho green "no Dput targets"
else
    for TARGET in ${dput_targets}
    do
	cecho blue "Uploading to $TARGET"

	if [ -z ${GBP_CHANGES_FILE-} ]; then
	    if ! debrelease --debs-dir=$BUILD_AREA --dput $TARGET; then
		(echo "Failed to upload to $TARGET"; echo )>&2
	    fi
	else
	    if ! dput --unchecked $dput_options $TARGET $GBP_CHANGES_FILE;
	    then
		cecho yellow "target $TARGET failed, but not fatal!"
	    fi
	fi

	### Invoke remote reprepro:
	if [ $TARGET = "maruska" ]; then
	    if [ $release = y ]; then
		cecho green "processing hardwired reprepro (fixme!)"

		# -t ... PTY allocation: the inside will have a $TERM.
		ssh -Y -A michal@www.ruska.it -t \
		    zsh --login -c "./reprepro/process-incoming; ls -l reprepro/incoming/"
	    fi
	fi
    done
fi



